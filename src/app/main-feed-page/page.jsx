/**
 * Main Feed page.jsx
 * 
 * Loaf Life â€“ The Main Feed page where 
 * all of our discussion boards will be hosted
 * 
 * Modified with assistance from ChatGPT o4-mini-high.
 * Images for the threads covers generated by ChatGPT 04-mini-high.
 * 
 * @author Brady Duval
 * @author https://chatgpt.com/
 */

'use client';

import React, { useState, useMemo, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import StickyNavbar from '@/components/StickyNavbar';
import BottomNav from '@/components/BottomNav';
import Footer from '@/components/Footer';
import {
    MagnifyingGlassIcon,
    ClipboardIcon,
} from '@heroicons/react/24/outline';

import AIbutton from '@/components/buttons/AIbutton';
import { clientDB } from '@/supabaseClient';

const threads = [
    {
        id: 1,
        title: 'Deals Thread',
        description: 'Best discounts and coupon codes around Vancouver',
        postCount: 0,
        imageUrl: '/images/threads/dealsThread.png',
        link: '/deals-page'
    },
    {
        id: 2,
        title: 'Hacks Thread',
        description: 'Life-hacks, study tips, and productivity tricks',
        postCount: 0,
        imageUrl: '/images/threads/hacksThread.png',
        link: '/hacks-page'
    },
    {
        id: 3,
        title: 'Events',
        description: 'Up-to-date listings of fun or helpful events',
        postCount: 0,
        imageUrl: '/images/threads/eventsThread.png',
        link: '/events-page'
    },
];

const tableMap = {
    1: 'deals',
    2: 'hacks',
    3: 'events',
}

export default function MainFeed() {
    const [activeFilter, setActiveFilter] = useState(null);
    const [interests, setInterests] = useState([]);
    const [loading, setLoading] = useState(true);
    const [postCounts, setPostCounts] = useState({});
    const filterOptions = ['Popular', 'Recent'];
    const [latestDates, setLatestDates] = useState({});

    useEffect(() => {
        const fetchInterests = async () => {
            const { data: { user } } = await clientDB.auth.getUser();
            if (!user) return;

            const { data, error } = await clientDB
                .from('user_profiles')
                .select('interests')
                .eq('id', user.id)
                .single();

            if (error) {
                console.error('Failed to fetch interests:', error.message);
            } else if (data?.interests) {
                setInterests(Array.isArray(data.interests)
                    ? data.interests
                    : data.interests.split(','));
            }

            setLoading(false);
        };

        fetchInterests();
    }, []);

    useEffect(() => {
        const fetchPostCounts = async () => {
            const countsMap = {}

            await Promise.all(
                threads.map(async (t) => {
                    const table = tableMap[t.id]
                    if (!table) return
                    const { count, error } = await clientDB
                        .from(table)
                        .select('id', { count: 'exact', head: true })

                    if (error) {
                        console.error(`Error counting ${table}:`, error)
                        countsMap[t.id] = 0
                    } else {
                        countsMap[t.id] = count ?? 0
                    }
                })
            )

            setPostCounts(countsMap)
        }
        fetchPostCounts()
    }, [])

    useEffect(() => {
        const fetchLatestDates = async () => {
            const map = {};

            await Promise.all(
                threads.map(async (t) => {
                    const table = tableMap[t.id];
                    if (!table) return;

                    const { data, error } = await clientDB
                        .from(table)
                        .select('created_at', { head: false })
                        .order('created_at', { ascending: false })
                        .limit(1)
                        .single();

                    if (error) {
                        console.error(`Error fetching latest date for ${table}:`, error);
                    } else if (data?.created_at) {
                        map[t.id] = data.created_at;
                    }
                })
            );

            setLatestDates(map);
        };

        fetchLatestDates();
    }, []);

    const visibleThreads = useMemo(() => {
        const enriched = threads.map((t) => ({
            ...t,
            postCount: postCounts[t.id] ?? t.postCount,
            latest: latestDates[t.id] ?? null,
        }));

        if (activeFilter === 'Popular') {
            return [...enriched].sort((a, b) => b.postCount - a.postCount);
        } else if (activeFilter === 'Recent') {
            return [...enriched].sort(
                (a, b) =>
                    new Date(b.latest).getTime() -
                    new Date(a.latest).getTime()
            );
        }

        return enriched;
    }, [activeFilter, postCounts, latestDates]);

    return (
        <div className="flex flex-col h-screen bg-[#F5E3C6] pt-16">
            <StickyNavbar />
            {/* Filters + Search */}
            <div className="p-4 border-b border-[#D1905A] max-w-md mx-auto w-full">
                <div className="flex flex-wrap gap-2 mb-3">
                    {filterOptions.map((opt) => (
                        <button
                            key={opt}
                            onClick={() =>
                                setActiveFilter(prev =>
                                    prev === opt
                                        ? null
                                        : opt
                                )
                            }
                            className={`
                                    px-4 py-1 text-sm font-medium rounded-full transition
                                    ${activeFilter === opt
                                    ? 'bg-[#639751] text-white'
                                    : 'bg-white text-[#8B4C24] hover:bg-gray-100'
                                }
                                `}
                        >
                            {opt}
                        </button>
                    ))}
                </div>

                <div className="relative">
                    <MagnifyingGlassIcon className="w-5 h-5 text-[#8B4C24] absolute left-3 top-1/2 -translate-y-1/2" />
                    <input
                        type="text"
                        placeholder="Search threads"
                        className={`
              w-full pl-10 pr-4 py-2 rounded-full bg-white border border-gray-200
              placeholder-[#8B4C24] text-[#8B4C24]
              focus:outline-none focus:ring-2 focus:ring-[#D1905A] focus:border-transparent
              transition
            `}
                    />
                </div>
            </div>

            {/* Scrollable Image Feed */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4 max-w-md mx-auto w-full relative pb-16">
                {visibleThreads.map((t) => (
                    <Link key={t.id} href={t.link} passHref className="block">
                        <div
                            className="
                            relative
                            h-48
                            rounded-2xl
                            overflow-hidden
                            shadow-lg
                            bg-cover
                            bg-center
                            transition-transform duration-200
                            hover:scale-105 hover:shadow-2xl
                            cursor-pointer
                            shadow-xl  
                            ring-2 ring-[#D1905A]
                            "
                            style={{
                                backgroundImage: `url(${t.imageUrl})`
                            }}
                        >
                            <Image
                                src={t.imageUrl}
                                alt={t.title}
                                fill
                                className="object-cover"
                                quality={100}
                                sizes="(max-width: 768px) 100vw, 600px"
                                priority
                            />
                            {/* Dark gradient for legibility */}
                            <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" />

                            {/* Title */}
                            <h2 className="absolute bottom-10 left-4 text-white text-lg font-semibold">
                                {t.title}
                            </h2>

                            {/* Description */}
                            <p className="absolute bottom-4 left-4 text-white/80 text-sm">
                                {t.description}
                            </p>

                            {/* Post-count badge */}
                            <div className="
                              absolute
                              top-4 right-4
                              inline-flex items-center
                              bg-white/90 text-[#8B4C24]
                              text-xs font-medium
                              px-2 py-0.5 rounded-full
                              border-2 border-[#D1905A]
                            ">
                                <ClipboardIcon className="w-4 h-4 mr-1" />
                                {t.postCount}
                            </div>
                        </div>
                    </Link>
                ))}

                <div className="px-4 py-2 max-w-md mx-auto w-full">
                    <AIbutton interests={interests} />
                </div>
                <Footer />
            </div>
            <BottomNav />
        </div>
    );
}
