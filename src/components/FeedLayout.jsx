/**
 * FeedLayout.jsx
 * Loaf Life â€“ Renders a fixed navbar and a sticky sort/filter bar, then wraps the feed content.
 *
 * Generated by ChatGPT o4-mini-high and edited with assistance from Google Gemini 2.5 Flash.
 *
 * @author Brady Duval
 * @author Nathan O
 * @author https://chatgpt.com/
 * @author https://gemini.google.com/app
 *
 * @function FeedLayout
 * @description Wraps page content with a StickyNavbar, sort controls, tag filters,
 *              and back navigation, handling sorting and filtering of feed items.
 *
 * @function getTagButtonLabel
 * @description Returns a label string summarizing the number of selected tags.
 *
 * @function handleClearFilters
 * @description Resets sort and tag filters to their default states.
 *
 * @function areFiltersActive
 * @description Determines whether any sort or tag filters are currently active.
 */

'use client'

import React, { useState, useRef, useEffect } from "react"
import { useRouter } from 'next/navigation';
import SortDropdown from "./SortDropdown"
import StickyNavbar from './StickyNavbar'
import { ChevronDownIcon } from "@heroicons/react/24/outline"
import { ArrowLeftIcon } from '@heroicons/react/24/outline';

export default function FeedLayout({
  children,               // Feed items rendered inside layout
  title,                  // Page title to display
  tagOptions = [],        // Available tags for filtering
  selectedTags = [],      // Tags currently selected
  onTagToggle = () => {}, // Callback when a tag is toggled
}) {

  // Sort state: best/worst
  const [bestSort, setBestSort] = useState("Best");
  // Sort state: newest/oldest
  const [dateSort, setDateSort] = useState("Newest");
  // Toggle state for tag dropdown visibility
  const [tagDropdownOpen, setTagDropdownOpen] = useState(false);
  const tagDropdownRef = useRef(null); // Ref to detect outside clicks
  // State for processed (sorted/filtered) children
  const [sortedAndFilteredChildren, setSortedAndFilteredChildren] = useState([]);
  const router = useRouter(); // For back button

  // Default sort values
  const defaultBestSort = "Best";
  const defaultDateSort = "Newest";

  // Options arrays for dropdowns
  const bestOptions = ["Best", "Worst"];
  const dateOptions = ["Newest", "Oldest"];

  // CSS classes reused for tag buttons
  const baseTagButtonClass = "py-1 px-3 rounded-full text-xs font-semibold focus:outline-none transition-all duration-200 ease-in-out whitespace-nowrap";
  const activeTagButtonClass = "bg-[#8B4C24] text-white hover:bg-[#7a421f]";
  const inactiveTagButtonClass = "bg-white text-[#8B4C24] hover:bg-gray-100 ring-1 ring-inset ring-[#D1905A]";

  // Close tag dropdown when clicking outside
  useEffect(() => {
    function handleClickOutside(event) {
      // If click occurred outside the dropdown, close it
      if (tagDropdownRef.current && !tagDropdownRef.current.contains(event.target)) {
        setTagDropdownOpen(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [tagDropdownRef]);

  // Recompute sorted and filtered feed items when inputs change
  useEffect(() => {
    const childrenArray = React.Children.toArray(children);

    const processedChildren = [...childrenArray].sort((childA, childB) => {
      // Extract props for sorting
      const propsA = childA?.props;
      const propsB = childB?.props;

      // Helper to verify if item has sortable data
      const isValidPostForSorting = (itemProps, currentSelectedTags) => {
        if (!itemProps || typeof itemProps.upvotes !== 'number' || typeof itemProps.downvotes !== 'number' || !itemProps.createdAt) {
          return false;
        }

        return true;
      };

      const isSortableA = isValidPostForSorting(propsA, selectedTags);
      const isSortableB = isValidPostForSorting(propsB, selectedTags);

      // Non-sortable items go to end
      if (isSortableA && !isSortableB) return -1;
      if (!isSortableA && isSortableB) return 1;
      if (!isSortableA && !isSortableB) return 0;

      // Compute score and timestamps
      const scoreA = propsA.upvotes - propsA.downvotes;
      const scoreB = propsB.upvotes - propsB.downvotes;
      const timeA = new Date(propsA.createdAt).getTime();
      const timeB = new Date(propsB.createdAt).getTime();

      const dateA = !isNaN(timeA) ? timeA : 0;
      const dateB = !isNaN(timeB) ? timeB : 0;

      // Primary sort: bestSort
      if (bestSort === "Best") {
        if (scoreB !== scoreA) return scoreB - scoreA; // Descending score
      } else if (bestSort === "Worst") { // "worst" means lowest score first
        if (scoreA !== scoreB) return scoreA - scoreB; // Ascending score
      }

      // Secondary sort: dateSort
      if (dateSort === "Newest") {
        return dateB - dateA; // Descending date
      } else if (dateSort === "Oldest") {
        return dateA - dateB; // Ascending date
      }

      return 0;
    });

    setSortedAndFilteredChildren(processedChildren);
  }, [children, bestSort, dateSort, selectedTags]);

   /**
   * getTagButtonLabel
   *
   * @function getTagButtonLabel
   * @returns {string} Label summarizing selected tag count.
   */
  const getTagButtonLabel = () => {
    if (selectedTags.length === 0) {
      return "All Tags";
    }
    if (selectedTags.length === 1) {
      return `1 Tag`;
    }
    return `${selectedTags.length} Tags`;
  };

  /**
   * handleClearFilters
   *
   * @function handleClearFilters
   * @description Reset sort and tag filters to defaults.
   */
  const handleClearFilters = () => {
    setBestSort(defaultBestSort);
    setDateSort(defaultDateSort);
    onTagToggle("ALL");
    setTagDropdownOpen(false);
  };

   /**
   * areFiltersActive
   *
   * @function areFiltersActive
   * @returns {boolean} True if any filter deviates from default.
   */
  const areFiltersActive = () => {
    return bestSort !== defaultBestSort || dateSort !== defaultDateSort || selectedTags.length > 0;
  };

  return (
    <> 
      {/* Fixed top navigation */}
      <StickyNavbar />

      {/* Sticky sort and filter bar */}
      <div className="sticky top-16 z-10 bg-[#F5E3C6]">
        <div className="max-w-md mx-auto flex items-center space-x-4 px-4 py-2 border-b border-[#D1905A]">
          {/* Sort by score */}
          <SortDropdown
            label={bestSort}
            options={bestOptions}
            onChange={setBestSort}
          />
          <span className="h-4 border-l border-[#D1905A]" />
          {/* Sort by date */}
          <SortDropdown
            label={dateSort}
            options={dateOptions}
            onChange={setDateSort}
          />
          {/* Tag filter dropdown */}
          {tagOptions.length > 0 && (
            <>
              <span className="h-4 border-l border-[#D1905A]" />
              <div ref={tagDropdownRef} className="relative inline-block text-left">
                <button
                  onClick={() => setTagDropdownOpen(o => !o)}
                  className="flex items-center space-x-1 text-sm font-medium text-[#8B4C24] hover:text-[#639751] focus:outline-none"
                >
                  <span>{getTagButtonLabel()}</span>
                  <ChevronDownIcon className="h-4 w-4" />
                </button>
                {/* Dropdown list of tags */}
                {tagDropdownOpen && (
                  <ul className="absolute mt-1 w-48 bg-white border border-[#D1905A] rounded-md shadow-lg z-20 overflow-hidden max-h-60 overflow-y-auto">
                    <li>
                      <button
                        onClick={() => {
                          onTagToggle("ALL");
                        }}
                        className={`
                          block w-full text-left px-3 py-2 text-sm flex items-center justify-between
                          ${selectedTags.length === 0
                            ? "bg-[#639751] text-white font-semibold"
                            : "text-[#8B4C24] hover:bg-[#F5E3C6]"
                          }
                        `}
                      >
                        All Tags
                      </button>
                    </li>
                    {tagOptions.map(tag => (
                      <li key={tag}>
                        <button
                          onClick={() => {
                            onTagToggle(tag);
                          }}
                          className={`
                            block w-full text-left px-3 py-2 text-sm flex items-center justify-between
                            ${selectedTags.includes(tag)
                              ? "bg-[#639751] text-white font-semibold"
                              : "text-[#8B4C24] hover:bg-[#F5E3C6]"
                            }
                          `}
                        >
                          {tag}
                        </button>
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </>
          )}

          {/* Clear filters button if any are active */}
          {areFiltersActive() && (
            <button
              onClick={handleClearFilters}
              className="ml-auto text-xs text-[#8B4C24] hover:text-[#639751] focus:outline-none underline"
            >
              Clear Filters
            </button>
          )}
        </div>
      </div>

      {/* Main feed content area */}
      <main className="max-w-md mx-auto px-4 py-6 space-y-6">
        {/* Back button and title header */}
        <div className="relative mb-4 pt-14">
          <button
              onClick={() => router.back()} // Navigate back on click
              className="absolute top-14 bg-[#F5EFE6] border-2 border-[#A0522D] text-[#A0522D] hover:bg-[#EADDCA] px-3 py-1.5 rounded-lg shadow-md flex items-center"
            >
              <ArrowLeftIcon className="h-5 w-5" />
            </button>
          <h1 className="text-2xl font-bold text-[#8B4C24] text-center">
            {title}
          </h1>
        </div>
        {/* Render sorted and filtered feed items */}
        {sortedAndFilteredChildren}
      </main>
    </>
  )
}
